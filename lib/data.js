var _ = require('lodash');
var async = require('async');

var redshiftUtil = require('./util');

/* USERS */

/**
 * Get all users
 *
 * @param  {String}       subpath                                                       The folder within the data folder in which to parse the data
 * @param  {Function}     callback                                                      Standard callback function
 * @param  {Object}       callback.users                                                The retrieved users
 * @param  {Number}       callback.users[id].id                                         Unique surrogate id for the user
 * @param  {Number}       callback.users[id].canvas_id                                  Primary key for this user in the Canvas users table
 * @param  {Number}       callback.users[id].root_account_id                            Root account associated with this user
 * @param  {String}       callback.users[id].name                                       Name of the user
 * @param  {String}       callback.users[id].time_zone                                  User's primary timezone
 * @param  {Date}         callback.users[id].created_at                                 Timestamp when the user was created in the Canvas system
 * @param  {String}       callback.users[id].visibility                                 TBD
 * @param  {String}       callback.users[id].school_name                                TBD
 * @param  {String}       callback.users[id].school_position                            TBD
 * @param  {String}       callback.users[id].gender                                     The user's gender. This is an optional field and may not be entered by the user
 * @param  {String}       callback.users[id].locale                                     The user's locale. This is an optional field and may not be entered by the user.
 * @param  {String}       callback.users[id].public                                     TBD
 * @param  {Date}         callback.users[id].birthdate                                  The user's birthdate. This is an optional field and may not be entered by the user
 * @param  {String}       callback.users[id].country_code                               The user's country code. This is an optional field and may not be entered by the user
 * @param  {String}       callback.users[id].workflow_state                             Workflow status indicating the status of the user, valid values are: creation_pending, deleted, pre_registered, registered
 * @param  {Number}       callback.users[id].pseudonym_id                               Unique surrogate id for the pseudonym
 * @param  {Number}       callback.users[id].pseudonym_canvas_id                        Primary key for this pseudonym in the the Canvas database
 * @param  {Number}       callback.users[id].pseudonym_account_id                       Id for the account associated with this pseudonym
 * @param  {String}       callback.users[id].pseudonym_workflow_state                   Workflow status indicating that pseudonym is [deleted] or [active]
 * @param  {Date}         callback.users[id].last_request_at                            TBD
 * @param  {Date}         callback.users[id].last_login_at                              Timestamp of last time a user logged in with this pseudonym
 * @param  {Date}         callback.users[id].current_login_at                           TBD
 * @param  {String}       callback.users[id].last_login_ip                              IP address recorded the last time a user logged in with this pseudonym
 * @param  {String}       callback.users[id].current_login_ip                           TBD
 * @param  {Number}       callback.users[id].pseudonym_position                         TBD
 * @param  {Date}         callback.users[id].created_at                                 Timestamp when this pseudonym was created in Canvas
 * @param  {Date}         callback.users[id].updated_at                                 Timestamp when this pseudonym was last updated in Canvas
 * @param  {Boolean}      callback.users[id].password_auto_generated                    True if the password has been autogenerated
 * @param  {Date}         callback.users[id].deleted_at                                 Timestamp when the pseudonym was deleted (NULL if the pseudonym is still active)
 * @param  {String}       callback.users[id].sis_user_id                                Correlated id for the record for this course in the SIS system (assuming SIS integration is configured)
 * @param  {String}       callback.users[id].unique_name                                Actual login id for a given pseudonym/account
 */
var getUsers = module.exports.getUsers = function(subpath, callback) {
  parseData(subpath, {
    'user_dim':      ['id', 'canvas_id', 'root_account_id', 'name', 'time_zone', 'created_at', 'visibility', 'school_name', 'school_position', 'gender', 'locale', 'public', 'birthdate', 'country_code', 'workflow_state'],
    'pseudonym_dim': ['pseudonym_id', 'pseudonym_canvas_id', 'id', 'pseudonym_account_id', 'pseudonym_workflow_state', 'last_request_at', 'last_login_at', 'current_login_at', 'last_login_ip', 'current_login_ip',
                      'pseudonym_position', 'created_at', 'updated_at', 'password_auto_generated', 'deleted_at', 'sis_user_id', 'unique_name']
  }, callback);
};

/* COURSES */

/**
 * Get all courses
 *
 * @param  {String}       subpath                                                       The folder within the data folder in which to parse the data
 * @param  {Function}     callback                                                      Standard callback function
 * @param  {Object}       callback.courses                                              The retrieved courses
 * @param  {Number}       callback.courses[id].id                                       Unique surrogate id for a course
 * @param  {Number}       callback.courses[id].canvas_id                                Primary key for this course in the canvas courses table
 * @param  {Number}       callback.courses[id].root_account_id                          The root account associated with this course
 * @param  {Number}       callback.courses[id].account_id                               The parent account for this course
 * @param  {Number}       callback.courses[id].enrollment_term_id                       Foreign key to enrollment term table
 * @param  {String}       callback.courses[id].name                                     The friendly name of the course
 * @param  {String}       callback.courses[id].code                                     The code for the course (eg FA12 MATH 2000)
 * @param  {String}       callback.courses[id].type                                     TBD
 * @param  {Date}         callback.courses[id].created_at                               Timestamp when the course object was created in Canvas
 * @param  {Date}         callback.courses[id].start_at                                 Timestamp for when the course starts
 * @param  {Date}         callback.courses[id].conclude_at                              Timestamp for when the course finishes
 * @param  {Boolean}      callback.courses[id].publicly_visible                         True if the course is publically visible
 * @param  {String}       callback.courses[id].sis_source_id                            Correlated id for the record for this course in the SIS system (assuming SIS integration is configured)
 * @param  {String}       callback.courses[id].workflow_state                           Workflow status indicating the current state of the course, valid values are: completed, created, deleted, available, claimed
 * @param  {Number}       callback.courses[id].wiki_id                                  Foreign key to the wiki_dim table
 */
var getCourses = module.exports.getCourses = function(subpath, callback) {
  parseData(subpath, {
    'course_dim': ['id', 'canvas_id', 'root_account_id', 'account_id', 'enrollment_term_id', 'name', 'code', 'type', 'created_at', 'start_at', 'conclude_at', 'publicly_visible', 'sis_source_id', 'workflow_state',
                   'wiki_id']
  }, callback);
};

/**
 * Get all course sections
 *
 * @param  {String}       subpath                                                       The folder within the data folder in which to parse the data
 * @param  {Function}     callback                                                      Standard callback function
 * @param  {Object}       callback.sections                                             The retrieved sections
 * @param  {Number}       callback.sections[id].id                                      Unique surrogate id for the course section
 * @param  {Number}       callback.sections[id].canvas_id                               Primary key for this record in the Canvas course_sections table
 * @param  {String}       callback.sections[id].name                                    Name of the section
 * @param  {Number}       callback.sections[id].course_id                               Foreign key to the associated course
 * @param  {Number}       callback.sections[id].enrollment_term_id                      Foreign key to the associated enrollment term
 * @param  {Boolean}      callback.sections[id].default_section                         True if this is the default section
 * @param  {Boolean}      callback.sections[id].accepting_enrollments                   True if this section is open for enrollment
 * @param  {Boolean}      callback.sections[id].can_manually_enroll                     TBD
 * @param  {Date}         callback.sections[id].start_at                                Section start date
 * @param  {Date}         callback.sections[id].end_at                                  Section end date
 * @param  {Date}         callback.sections[id].created_at                              Timestamp for when this section was entered into the system
 * @param  {Date}         callback.sections[id].updated_at                              Timestamp for when the last time the section was updated
 * @param  {String}       callback.sections[id].workflow_state                          Lifecycle state for section. (active, deleted)
 * @param  {Boolean}      callback.sections[id].restrict_enrollments_to_section_dates   True when "Users can only partipate in the course between these dates" is checked
 * @param  {Number}       callback.sections[id].nonxlist_course_id                      The course id for the original course if this course has been cross listed
 * @param  {String}       callback.sections[id].sis_source_id                           Id for the correlated record for the section in the SIS (assumming SIS integration has been properly configured)
 */
var getSections = module.exports.getSections = function(subpath, callback) {
  parseData(subpath, {
    'course_section_dim': ['id', 'canvas_id', 'name', 'course_id', 'enrollment_term_id', 'default_section', 'accepting_enrollments', 'can_manually_enroll', 'start_at', 'end_at', 'created_at', 'updated_at',
                           'workflow_state', 'restrict_enrollments_to_section_dates', 'nonxlist_course_id', 'sis_source_id']
  }, callback);
};

/* DISCUSSIONS */

/**
 * Get all discussion topics
 *
 * @param  {String}       subpath                                                       The folder within the data folder in which to parse the data
 * @param  {Function}     callback                                                      Standard callback function
 * @param  {Object}       callback.discussions                                          The retrieved discussion topics
 * @param  {Number}       callback.discussions[id].id                                   Unique surrogate id for the discussion topic
 * @param  {Number}       callback.discussions[id].canvas_id                            Primary key to the dicussion_topics table in Canvas
 * @param  {String}       callback.discussions[id].title                                Title of the discussion topic
 * @param  {String}       callback.discussions[id].message                              Message text for the discussion topic
 * @param  {String}       callback.discussions[id].type                                 Discussion topic type. Two types are default (blank) and announcement
 * @param  {String}       callback.discussions[id].workflow_state                       Workflow state for this discussion topic. Valid states are unpublished, active, locked, deleted, and post_delayed
 * @param  {Date}         callback.discussions[id].last_reply_at                        Timestamp of the last reply to this topic
 * @param  {Date}         callback.discussions[id].created_at                           Timestamp when the discussion topic was first saved in the system
 * @param  {Date}         callback.discussions[id].updated_at                           Timestamp when the discussion topic was last updated in the system
 * @param  {Date}         callback.discussions[id].delayed_post_at                      Timestamp when the discussion topic was/will be delay-posted
 * @param  {Date}         callback.discussions[id].posted_at                            Timestamp when the discussion topic was posted
 * @param  {Date}         callback.discussions[id].deleted_at                           Timestamp when the discussion topic was deleted
 * @param  {String}       callback.discussions[id].discussion_type                      Type of discussion topic: default(blank), side_comment, threaded. threaded indicates that replies are threaded where side_comment indicates that replies in the discussion are flat. See related Canvas Guide https://guides.instructure.com/m/4152/l/60423-how-do-i-create-a-threaded-discussion
 * @param  {Boolean}      callback.discussions[id].pinned                               True if the discussion topic has been pinned
 * @param  {Boolean}      callback.discussions[id].locked                               True if the discussion topic has been locked
 * @param  {Number}       callback.discussions[id].course_id                            Foreign key to the course dimension
 * @param  {Number}       callback.discussions[id].enrollment_term_id                   Foreign Key to enrollment term table
 * @param  {Number}       callback.discussions[id].course_account_id                    Foreign key to the account dimension for the account associated with the associated course
 * @param  {Number}       callback.discussions[id].user_id                              Foreign key to the user dimension for the user that created the discussion topic
 * @param  {Number}       callback.discussions[id].assignment_id                        Foreign key to the assignment dimension
 * @param  {Number}       callback.discussions[id].editor_id                            TBD
 * @param  {Number}       callback.discussions[id].enrollment_rollup_id                 Foreign key to the enrollment rollup dimension table
 * @param  {Number}       callback.discussions[id].message_length                       The length of the message in bytes
 */
var getDiscussions = module.exports.getDiscussions = function(subpath, callback) {
  parseData(subpath, {
    'discussion_topic_dim':  ['id', 'canvas_id', 'title', 'message', 'type', 'workflow_state', 'last_reply_at', 'created_at', 'updated_at', 'delayed_post_at', 'posted_at', 'deleted_at', 'discussion_type',
                              'pinned', 'locked'],
    'discussion_topic_fact': ['id', 'course_id', 'enrollment_term_id', 'course_account_id', 'user_id', 'assignment_id', 'editor_id', 'enrollment_rollup_id', 'message_length']
  }, callback);
};

/**
 * Get all discussion entries
 *
 * @param  {String}       subpath                                                       The folder within the data folder in which to parse the data
 * @param  {Function}     callback                                                      Standard callback function
 * @param  {Object}       callback.entries                                              The retrieved discussion entries
 * @param  {Number}       callback.entries[id].id                                       Unique surrogate id for the discussion entry
 * @param  {Number}       callback.entries[id].canvas_id                                Primary key for this record in the Canvas discussion_entries table
 * @param  {String}       callback.entries[id].message                                  Full text of the entry's message
 * @param  {String}       callback.entries[id].workflow_state                           Workflow state for discussion message (values: deleted, active)
 * @param  {Date}         callback.entries[id].created_at                               Timestamp when the discussion entry was created
 * @param  {Date}         callback.entries[id].updated_at                               Timestamp when the discussion entry was upadated
 * @param  {Date}         callback.entries[id].deleted_at                               Timestamp when the discussion entry was deleted
 * @param  {Number}       callback.entries[id].depth                                    Reply depth for this entry
 * @param  {Number}       callback.entries[id].parent_discussion_entry_id               Foreign key to the reply that it is nested underneath
 * @param  {Number}       callback.entries[id].user_id                                  Foreign key to the user that created this entry
 * @param  {Number}       callback.entries[id].topic_id                                 Foreign key to associated discussion topic
 * @param  {Number}       callback.entries[id].course_id                                Foreign key to associated course
 * @param  {Number}       callback.entries[id].enrollment_term_id                       Foreign Key to enrollment term table
 * @param  {Number}       callback.entries[id].course_account_id                        Foreign key to account for associated course
 * @param  {Number}       callback.entries[id].topic_user_id                            Foreign key to user that posted the associated discussion topic
 * @param  {Number}       callback.entries[id].topic_assignment_id                      Foreign key to assignment associated with the entry's discussion topic
 * @param  {Number}       callback.entries[id].topic_editor_id                          Foreign key to editor associated with the entry's discussion topic
 * @param  {Number}       callback.entries[id].enrollment_rollup_id                     Foreign key to the enrollment rollup dimension table
 * @param  {Number}       callback.entries[id].message_length                           Length of the message in bytes
 */
var getDiscussionEntries = module.exports.getDiscussionEntries = function(subpath, callback) {
  parseData(subpath, {
    'discussion_entry_dim':  ['id', 'canvas_id', 'message', 'workflow_state', 'created_at', 'updated_at', 'deleted_at', 'depth'],
    'discussion_entry_fact': ['id', 'parent_discussion_entry_id', 'user_id', 'topic_id', 'course_id', 'enrollment_term_id', 'course_account_id', 'topic_user_id', 'topic_assignment_id', 'topic_editor_id',
                              'enrollment_rollup_id', 'message_length']
  }, callback);
};

/* ASSIGNMENTS */

/**
 * Get all assignments
 *
 * @param  {String}       subpath                                                       The folder within the data folder in which to parse the data
 * @param  {Function}     callback                                                      Standard callback function
 * @param  {Object}       callback.assignments                                          The retrieved assignments
 * @param  {Number}       callback.assignments[id].id                                   Unique surrogate id for the assignment
 * @param  {Number}       callback.assignments[id].canvas_id                            Primary key for this record in the Canvas assignments table
 * @param  {Number}       callback.assignments[id].course_id                            Foreign key to the course associated with this assignment
 * @param  {String}       callback.assignments[id].title                                Title of the assignment
 * @param  {String}       callback.assignments[id].description                          Long description of the assignment
 * @param  {Date}         callback.assignments[id].due_at                               Timestamp for when the assignment is due
 * @param  {Date}         callback.assignments[id].unlock_at                            Timestamp for when the assignment is unlocked or visible to the user
 * @param  {Date}         callback.assignments[id].lock_at                              Timestamp for when the assignment is locked
 * @param  {Number}       callback.assignments[id].points_possible                      Total points possible for the assignment
 * @param  {String}       callback.assignments[id].grading_type                         Describes how the assignment will be graded (gpa_scale, pass_fail, percent, points, not_graded, letter_grade)
 * @param  {String}       callback.assignments[id].submission_types                     Comma separated list of valid methods for submitting the assignment (online_url, media_recording, online_upload, online_quize, external_tool, online_text_entry, online_file_upload)
 * @param  {String}       callback.assignments[id].workflow_state                       Current worflow state of the assignment. Possible vaues are unpublished, published and deleted
 * @param  {Date}         callback.assignments[id].created_at                           Timestamp of the first time the assignment was entered into the system
 * @param  {Date}         callback.assignments[id].updated_at                           Timestamp of the last time the assignment was updated
 * @param  {Number}       callback.assignments[id].peer_review_count                    The number of pears to assign for review if using algorithmic assignment
 * @param  {Date}         callback.assignments[id].peer_reviews_due_at                  Timestamp for when peer reviews should be completed
 * @param  {Boolean}      callback.assignments[id].peer_reviews_assigned                True if all peer reviews have been assigned
 * @param  {Boolean}      callback.assignments[id].peer_reviews                         True if peer reviews are enabled for this assignment
 * @param  {Boolean}      callback.assignments[id].automatic_peer_reviews               True if peer reviews are assigned algorithmically (vs. letting the instructor make manual assignments)
 * @param  {Boolean}      callback.assignments[id].all_day                              True if A specific time for when the assignment is due was not given. The effective due time will be 11:59pm
 * @param  {Date}         callback.assignments[id].all_day_date                         The date version of the due date if the all_day flag is true
 * @param  {Boolean}      callback.assignments[id].could_be_locked                      TBD
 * @param  {Boolean}      callback.assignments[id].grade_group_students_individually    True if students who submit work as a group will each receive individual grades (vs one grade that is copied to all group members)
 * @param  {Boolean}      callback.assignments[id].anonymous_peer_reviews               TBD
 * @param  {Boolean}      callback.assignments[id].muted                                Student cannot see grades left on the assignment
 * @param  {Number}       callback.assignments[id].course_account_id                    Foreign key to the account associated with the course associated with this assignment
 * @param  {Number}       callback.assignments[id].enrollment_term_id                   Foreign Key to enrollment term table
 */
var getAssignments = module.exports.getAssignments = function(subpath, callback) {
  parseData(subpath, {
    'assignment_dim':  ['id', 'canvas_id', 'course_id', 'title', 'description', 'due_at', 'unlock_at', 'lock_at', 'points_possible', 'grading_type', 'submission_types', 'workflow_state', 'created_at',
                        'updated_at', 'peer_review_count', 'peer_reviews_due_at', 'peer_reviews_assigned', 'peer_reviews', 'automatic_peer_reviews', 'all_day', 'all_day_date', 'could_be_locked',
                        'grade_group_students_individually', 'anonymous_peer_reviews', 'muted'],
    'assignment_fact': ['id', 'course_id', 'course_account_id', 'enrollment_term_id']
  }, callback);
};

/**
 * Get all assignment submissions
 *
 * @param  {String}       subpath                                                       The folder within the data folder in which to parse the data
 * @param  {Function}     callback                                                      Standard callback function
 * @param  {Object}       callback.submissions                                          The retrieved assignment submissions
 * @param  {Number}       callback.submissions[id].id                                   Unique surrogate id for the submission
 * @param  {Number}       callback.submissions[id].canvas_id                            Primary key of this record in the Canvas submissions table
 * @param  {String}       callback.submissions[id].body                                 Text content for the submission
 * @param  {String}       callback.submissions[id].url                                  URL content for the submission
 * @param  {String}       callback.submissions[id].grade                                Letter grade mapped from the score by the grading scheme
 * @param  {Date}         callback.submissions[id].submitted_at                         Timestamp of when the submission was submitted
 * @param  {String}       callback.submissions[id].submission_type                      Type of subimission (online_url, media_recording, online_upload, online_quize, external_tool, online_text_entry, online_file_upload, discussion_topic)
 * @param  {String}       callback.submissions[id].workflow_state                       Workflow state for submission lifetime values (unsubmitted, submitted, graded, pending_review)
 * @param  {Date}         callback.submissions[id].created_at                           Timestamp of when the submission was created
 * @param  {Date}         callback.submissions[id].updated_at                           Timestamp of when the submission was last updated
 * @param  {Boolean}      callback.submissions[id].processed                            TBD
 * @param  {Number}       callback.submissions[id].process_attempts                     TBD
 * @param  {Boolean}      callback.submissions[id].grade_matches_current_submission     TBD
 * @param  {String}       callback.submissions[id].published_grade                      TBD
 * @param  {Date}         callback.submissions[id].graded_at                            Timestamp of when the submission was graded
 * @param  {Boolean}      callback.submissions[id].has_rubric_assessment                TBD
 * @param  {Number}       callback.submissions[id].attempt                              The number of attempts made including this one
 * @param  {Boolean}      callback.submissions[id].has_admin_comment                    TBD
 * @param  {Number}       callback.submissions[id].assignment_id                        Foreign key to assignment dimension
 * @param  {Number}       callback.submissions[id].course_id                            Foreign key to course dimension of course associated with the assignment
 * @param  {Number}       callback.submissions[id].enrollment_term_id                   Foreign Key to enrollment term table
 * @param  {Number}       callback.submissions[id].user_id                              Foreign key to user dimension of user who submitted the assignment
 * @param  {Number}       callback.submissions[id].grader_id                            Foreign key to the user dimension of user who graded the assignment
 * @param  {Number}       callback.submissions[id].course_account_id                    Foreign key to the account dimension of the account associated with the course associated with the assignment
 * @param  {Number}       callback.submissions[id].enrollment_rollup_id                 Foreign key to the enrollment rollup dimension table
 * @param  {Number}       callback.submissions[id].score                                Numeric grade given to the submission
 * @param  {Number}       callback.submissions[id].published_score                      TBD
 * @param  {Number}       callback.submissions[id].what_if_score                        TBD
 * @param  {Number}       callback.submissions[id].submission_comments_count            TBD
 */
var getAssignmentSubmissions = module.exports.getAssignmentSubmissions = function(subpath, callback) {
  parseData(subpath, {
    'submission_dim':  ['id', 'canvas_id', 'body', 'url', 'grade', 'submitted_at', 'submission_type', 'workflow_state', 'created_at', 'updated_at', 'processed', 'process_attempts', 'grade_matches_current_submission',
                        'published_grade', 'graded_at', 'has_rubric_assessment', 'attempt', 'has_admin_comment', 'assignment_id'],
    'submission_fact': ['id', 'assignment_id', 'course_id', 'enrollment_term_id', 'user_id', 'grader_id', 'course_account_id', 'enrollment_rollup_id', 'score', 'published_score', 'what_if_score', 'submission_comments_count']
  }, callback);
};

/**
 * Get all assignment submission comments
 *
 * @param  {String}       subpath                                                       The folder within the data folder in which to parse the data
 * @param  {Function}     callback                                                      Standard callback function
 * @param  {Object}       callback.comments                                             The retrieved assignment submission comments
 * @param  {Number}       callback.comments[id].id                                      TBD
 * @param  {Number}       callback.comments[id].canvas_id                               TBD
 * @param  {Number}       callback.comments[id].submission_id                           TBD
 * @param  {Number}       callback.comments[id].recipient_id                            TBD
 * @param  {Number}       callback.comments[id].author_id                               TBD
 * @param  {Number}       callback.comments[id].assessment_request_id                   TBD
 * @param  {Number}       callback.comments[id].group_comment_id                        TBD
 * @param  {String}       callback.comments[id].comment                                 TBD
 * @param  {String}       callback.comments[id].author_name                             TBD
 * @param  {Date}         callback.comments[id].created_at                              TBD
 * @param  {Date}         callback.comments[id].updated_at                              TBD
 * @param  {Boolean}      callback.comments[id].anonymous                               TBD
 * @param  {Boolean}      callback.comments[id].teacher_only_comment                    TBD
 * @param  {Boolean}      callback.comments[id].hidden                                  TBD
 * @param  {Number}       callback.comments[id].assignment_id                           Foreign key to assignment dimension
 * @param  {Number}       callback.comments[id].course_id                               Foreign key to course dimension of course associated with the assignment
 * @param  {Number}       callback.comments[id].enrollment_term_id                      Foreign Key to enrollment term table
 * @param  {Number}       callback.comments[id].course_account_id                       Foreign key to the account dimension of the account associated with the course associated with the assignment
 * @param  {Number}       callback.comments[id].message_size_bytes                      The message size in bytes
 * @param  {Number}       callback.comments[id].message_character_count                 The message size in characters
 * @param  {Number}       callback.comments[id].message_word_count                      The message size in words using space and common punctualtion as word breaks
 * @param  {Number}       callback.comments[id].message_line_count                      The number of lines in a message
 * @param  {Number}       callback.comments[id].commenter_id                            TBD
 * @param  {Number}       callback.comments[id].commenter_user_id                       TBD
 */
var getAssignmentSubmissionComments = module.exports.getAssignmentSubmissionComments = function(subpath, callback) {
  parseData(subpath, {
    'submission_comment_dim':              ['id', 'canvas_id', 'submission_id', 'recipient_id', 'author_id', 'assessment_request_id', 'group_comment_id', 'comment', 'author_name', 'created_at', 'updated_at',
                                            'anonymous', 'teacher_only_comment', 'hidden'],
    'submission_comment_fact':             ['id', 'submission_id', 'recipient_id', 'author_id', 'assignment_id', 'course_id', 'enrollment_term_id', 'course_account_id', 'message_size_bytes', 'message_character_count',
                                            'message_word_count', 'message_line_count'],
    'submission_comment_participant_fact': ['commenter_id', 'id', 'commenter_user_id']
  }, callback);
};

/* FILES */

/**
 * Get a file. As this information is not available via Canvas Data, a REST API call will be performed instead
 *
 * @param  {String}       id                                                            The id of the file to retrieve
 * @param  {Function}     callback                                                      Standard callback function
 * @param  {Object}       callback.err                                                  An error that occurred, if any
 * @param  {Object}       callback.file                                                 The retrieved file
 * @param  {Number}       [callback.course_id]                                          The id of the course in which the file resides
 */
var getFile = module.exports.getFile = function(id, callback) {
  // Get the file information
  redshiftUtil.canvasApiRequest('/api/v1/files/' + id, function(err, file) {
    // Get the information about the folder the file resides in
    redshiftUtil.canvasApiRequest('/api/v1/folders/' + file.folder_id, function(err, folder) {
      var course_id = null;
      if (folder.context_type === 'Course') {
        course_id = folder.context_id;
      }
      return callback(err, file, course_id);
    });
  });
};

/* REQUESTS */

/**
 * Get all requests
 *
 * @param  {String}       subpath                                                       The folder within the data folder in which to parse the data
 * @param  {Function}     callback                                                      Standard callback function
 * @param  {Object}       callback.requests                                             The retrieved requests
 * @param  {String}       callback.requests[id].id                                      The request ID assigned by the canvas system
 * @param  {Date}         callback.requests[id].timestamp                               Timestamp when the request was made in UTC
 * @param  {String}       callback.requests[id].timestamp_year                          Year when the request was made
 * @param  {String}       callback.requests[id].timestamp_month                         Month when the request was made
 * @param  {String}       callback.requests[id].timestamp_day                           Day when the request was made
 * @param  {Number}       callback.requests[id].user_id                                 The foreign key in user_dim for the user that made the request
 * @param  {Number}       callback.requests[id].course_id                               The foreign key in course_dim for the course that owned the page requested (NULL if not applicable)
 * @param  {Number}       callback.requests[id].root_account_id                         The foreign key in account_dim for the root account on which this request was made
 * @param  {Number}       callback.requests[id].course_account_id                       The foreign key in account_dim for the account the associated course is owned by
 * @param  {Number}       callback.requests[id].quiz_id                                 Quiz foreign key if page request is for a quiz, otherwise NULL
 * @param  {Number}       callback.requests[id].discussion_id                           Discussion foreign key if page request is for a discussion, otherwise NULL
 * @param  {Number}       callback.requests[id].conversation_id                         Conversation foreign key if page request is for a conversation, otherwise NULL
 * @param  {Number}       callback.requests[id].assignment_id                           Assignment foreign key if page request is for an assingnment, otherwise NULL
 * @param  {String}       callback.requests[id].url                                     First 256 characters of the requested URL
 * @param  {String}       callback.requests[id].user_agent                              First 256 characters of the User Agent header received from the users browser/client software
 * @param  {String}       callback.requests[id].http_method                             HTTP method/verb (GET,PUT,POST etc.) that was sent with the request
 * @param  {String}       callback.requests[id].remote_ip                               IP address that was recorded from the request
 * @param  {Number}       callback.requests[id].interaction_micros                      Total time required to service the request in microseconds
 * @param  {String}       callback.requests[id].web_application_controller              The controller the Canvas web application used to service this request
 * @param  {String}       callback.requests[id].web_application_action                  The controller the Canvas web application used to service this request
 * @param  {String}       callback.requests[id].web_application_context_type            The containing object type the Canvas web application used to service this request
 * @param  {String}       callback.requests[id].web_application_context_id              The containing object's id the Canvas web application used to service this request
 */
var getRequests = module.exports.getRequests = function(subpath, callback) {
  parseData(subpath, {
    'requests':  ['id', 'timestamp', 'timestamp_year', 'timestamp_month', 'timestamp_day', 'user_id', 'course_id', 'root_account_id', 'course_account_id', 'quiz_id', 'discussion_id', 'conversation_id',
                  'assignment_id', 'url', 'user_agent', 'http_method', 'remote_ip', 'interaction_micros', 'web_application_controller', 'web_application_action', 'web_application_context_type',
                  'web_application_context_id']
  }, callback);
};

/* UTIL */

/**
 * Convert the data from a set of Canvas Data CSV files to a coherent array of objects
 *
 * @param  {String}       subpath                                                       The folder within the data folder in which to parse the data
 * @param  {Object}       map                                                           The files to parse and the expected fields in those files. The key represents the files to parse, and the values represent the field names of the columns within those files
 * @param  {Function}     callback                                                      Standard callback function
 * @param  {Object}       callback.data                                                 The data extracted from the Canvas Data CSV files. The keys represent the unique id of each object, and the values represent the extracted object for the object with that id
 * @api private
 */
var parseData = function(subpath, map, callback) {
  var items = {};

  // Run through all of the files that need parsing
  var files = _.keys(map);
  async.eachSeries(files, function(file, done) {
    redshiftUtil.parseDataFiles(subpath + '/' + file, function(data) {
      // Get the columns for the current file
      var columns = map[file];
      // Run through all of the rows in the parsed files
      _.each(data, function(row) {
        // Extract the `id` of the row
        var id = row[_.indexOf(columns, 'id')];
        items[id] = items[id] || {};
        // Apply all properties to the parsed object
        _.each(columns, function(column, index) {
          var value = row[index];
          items[id][column] = (value === '\\N' ? null : value);
        });
      });
      return done();
    });
  }, function() {
    return callback(items);
  });
};
